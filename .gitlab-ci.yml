image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

variables:
    OTB_BUILD: /src/otb/build/OTB/build  # Local OTB build directory
    OTBTF_SRC: /src/otbtf  # Local OTBTF source directory
    OTB_TEST_DIR: $OTB_BUILD/Testing/Temporary  # OTB testing directory
    ARTIFACT_TEST_DIR: $CI_PROJECT_DIR/testing
    CRC_BOOK_TMP: /tmp/crc_book_tests_tmp
    DOCKER_BUILDKIT: 1
    DOCKER_DRIVER: overlay2
    CACHE_IMAGE_BASE: $CI_REGISTRY_IMAGE:otbtf-base
    CACHE_IMAGE_BUILDER: $CI_REGISTRY_IMAGE:builder
    
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID             # Execute jobs in merge request context

stages:
  - Build
  - Static Analysis
  - Test
  - Applications Test
  - Ship

docker image:
  stage: Build
  allow_failure: false
  tags: [godzilla]
  image: docker/compose:latest
  except:
    - develop
  services:
    - name: docker:dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  timeout: 10 hours
  script:
    - >
      docker build
      --target otbtf-base
      --network="host"
      --cache-from $CACHE_IMAGE_BASE
      --tag $CACHE_IMAGE_BASE
      --build-arg BASE_IMG="ubuntu:20.04"
      --build-arg BUILDKIT_INLINE_CACHE=1
      "."
    - >
      docker build
      --target builder
      --network="host"
      --cache-from $CACHE_IMAGE_BASE
      --cache-from $CACHE_IMAGE_BUILDER
      --tag $CACHE_IMAGE_BUILDER
      --build-arg OTBTESTS="true"
      --build-arg KEEP_SRC_OTB="true"
      --build-arg BZL_CONFIGS=""
      --build-arg BASE_IMG="ubuntu:20.04"
      --build-arg BUILDKIT_INLINE_CACHE=1
      "."
    - >
      docker build
      --network="host"
      --cache-from $CACHE_IMAGE_BASE
      --cache-from $CACHE_IMAGE_BUILDER
      --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
      --cache-from $CI_REGISTRY_IMAGE:cpu-basic-dev-testing
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
      --build-arg OTBTESTS="true"
      --build-arg KEEP_SRC_OTB="true"
      --build-arg BZL_CONFIGS=""
      --build-arg BASE_IMG="ubuntu:20.04"
      --build-arg BUILDKIT_INLINE_CACHE=1
      "."
  after_script:
    - docker push $CACHE_IMAGE_BASE
    - docker push $CACHE_IMAGE_BUILDER
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

.static_analysis_base:
  stage: Static Analysis
  allow_failure: true

flake8:
  extends: .static_analysis_base
  script:
    - sudo apt update && sudo apt install flake8 -y
    - python -m flake8 --max-line-length=120 --per-file-ignores="__init__.py:F401" $OTBTF_SRC/otbtf

pylint:
  extends: .static_analysis_base
  script:
    - sudo apt update && sudo apt install pylint -y
    - pylint --logging-format-style=old --disable=too-many-nested-blocks,too-many-locals,too-many-statements,too-few-public-methods,too-many-instance-attributes,too-many-arguments --ignored-modules=tensorflow --max-line-length=120 --logging-format-style=new $OTBTF_SRC/otbtf

codespell:
  extends: .static_analysis_base
  script:
    - sudo pip install codespell && codespell
    
cppcheck:
  extends: .static_analysis_base
  script:
    - sudo apt update && sudo apt install cppcheck -y
    - cd $OTBTF_SRC/ && cppcheck --enable=all --error-exitcode=1 -I include/ --suppress=missingInclude --suppress=unusedFunction .

.tests_base:
  artifacts:
    paths:
      - $ARTIFACT_TEST_DIR/*.*
    expire_in: 1 week
    when: on_failure

ctest:
  extends: .tests_base
  stage: Test
  script:
    - cd $OTB_BUILD/ && sudo ctest -L OTBTensorflow  # Run ctest
  after_script:
    - cp -r $OTB_TEST_DIR $ARTIFACT_TEST_DIR

.applications_test_base:
  extends: .tests_base
  stage: Applications Test
  before_script:
    - pip3 install pytest pytest-cov pytest-order
    - mkdir -p $ARTIFACT_TEST_DIR
    - cd $CI_PROJECT_DIR

crc_book:
  extends: .applications_test_base
  script:
    - mkdir -p $CRC_BOOK_TMP
    - TMPDIR=$CRC_BOOK_TMP DATADIR=$CI_PROJECT_DIR/test/data python -m pytest --junitxml=$CI_PROJECT_DIR/report_tutorial.xml $OTBTF_SRC/test/tutorial_unittest.py
  after_script:
    - cp $CRC_BOOK_TMP/*.* $ARTIFACT_TEST_DIR/
    
sr4rs:
  extends: .applications_test_base
  script:
    - wget -O sr4rs_sentinel2_bands4328_france2020_savedmodel.zip
      https://nextcloud.inrae.fr/s/EZL2JN7SZyDK8Cf/download/sr4rs_sentinel2_bands4328_france2020_savedmodel.zip
    - unzip -o sr4rs_sentinel2_bands4328_france2020_savedmodel.zip
    - wget -O sr4rs_data.zip https://nextcloud.inrae.fr/s/kDms9JrRMQE2Q5z/download
    - unzip -o sr4rs_data.zip
    - rm -rf sr4rs
    - git clone https://github.com/remicres/sr4rs.git
    - export PYTHONPATH=$PYTHONPATH:$PWD/sr4rs
    - python -m pytest --junitxml=$ARTIFACT_TEST_DIR/report_sr4rs.xml $OTBTF_SRC/test/sr4rs_unittest.py

buildall:
  stage: Ship
  rules:
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - echo "Shippping!"
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:cpu-basic-dev-testing
    - docker push $CI_REGISTRY_IMAGE:cpu-basic-dev-testing
    - docker build --network='host' --tag $CI_REGISTRY_IMAGE:cpu-basic --build-arg BASE_IMG=ubuntu:20.04 --build-arg BZL_CONFIGS="" .  # cpu-basic
    - docker push $CI_REGISTRY_IMAGE:cpu-basic
    - docker build --network='host' --tag $CI_REGISTRY_IMAGE:cpu-basic-dev --build-arg BASE_IMG=ubuntu:20.04 --build-arg BZL_CONFIGS="" --build-arg KEEP_SRC_OTB=true .  # cpu-basic-dev
    - docker push $CI_REGISTRY_IMAGE:cpu-basic-dev
    - docker build --network='host' --tag $CI_REGISTRY_IMAGE:gpu --build-arg BASE_IMG=nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04 .  # gpu
    - docker push $CI_REGISTRY_IMAGE:gpu
    - docker build --network='host' --tag mdl4eo/otbtf${VER}:gpu-dev --build-arg BASE_IMG=nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04 --build-arg KEEP_SRC_OTB=true .  # gpu-dev
    - docker push $CI_REGISTRY_IMAGE:gpu-dev
    - docker build --network='host' --tag $CI_REGISTRY_IMAGE:gpu-basic --build-arg BASE_IMG=nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04 --build-arg BZL_CONFIGS="" .  # gpu-basic
    - docker push $CI_REGISTRY_IMAGE:gpu-basic
    - docker build --network='host' --tag mdl4eo/otbtf${VER}:gpu-basic-dev --build-arg BZL_CONFIGS="" --build-arg BASE_IMG=nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04 --build-arg KEEP_SRC_OTB=true .  # gpu-basic-dev
    - docker push $CI_REGISTRY_IMAGE:gpu-basic-dev

